/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AuditLogs } from '../types';
// @ts-ignore
import { HTTPValidationError } from '../types';
/**
 * DecisionLogsApi - axios parameter creator
 * @export
 */
export const DecisionLogsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary List PDP Decisions
     * @param {Array<string>} [users] List of user IDs to filter by
     * @param {boolean} [approved] Filter by approved decisions
     * @param {Array<string>} [resources] Filter by resources
     * @param {number} [timestampFrom] Filter by timestamp from
     * @param {number} [timestampTo] Filter by timestamp to
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {string} [permitSession]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOpaLogs: async (
      users?: Array<string>,
      approved?: boolean,
      resources?: Array<string>,
      timestampFrom?: number,
      timestampTo?: number,
      page?: number,
      perPage?: number,
      permitSession?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/v2/decision-logs`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (users) {
        localVarQueryParameter['users'] = users;
      }

      if (approved !== undefined) {
        localVarQueryParameter['approved'] = approved;
      }

      if (resources) {
        localVarQueryParameter['resources'] = resources;
      }

      if (timestampFrom !== undefined) {
        localVarQueryParameter['timestamp_from'] = timestampFrom;
      }

      if (timestampTo !== undefined) {
        localVarQueryParameter['timestamp_to'] = timestampTo;
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (perPage !== undefined) {
        localVarQueryParameter['per_page'] = perPage;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DecisionLogsApi - functional programming interface
 * @export
 */
export const DecisionLogsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DecisionLogsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary List PDP Decisions
     * @param {Array<string>} [users] List of user IDs to filter by
     * @param {boolean} [approved] Filter by approved decisions
     * @param {Array<string>} [resources] Filter by resources
     * @param {number} [timestampFrom] Filter by timestamp from
     * @param {number} [timestampTo] Filter by timestamp to
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {string} [permitSession]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOpaLogs(
      users?: Array<string>,
      approved?: boolean,
      resources?: Array<string>,
      timestampFrom?: number,
      timestampTo?: number,
      page?: number,
      perPage?: number,
      permitSession?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuditLogs>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getOpaLogs(
        users,
        approved,
        resources,
        timestampFrom,
        timestampTo,
        page,
        perPage,
        permitSession,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * DecisionLogsApi - factory interface
 * @export
 */
export const DecisionLogsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = DecisionLogsApiFp(configuration);
  return {
    /**
     *
     * @summary List PDP Decisions
     * @param {Array<string>} [users] List of user IDs to filter by
     * @param {boolean} [approved] Filter by approved decisions
     * @param {Array<string>} [resources] Filter by resources
     * @param {number} [timestampFrom] Filter by timestamp from
     * @param {number} [timestampTo] Filter by timestamp to
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {string} [permitSession]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOpaLogs(
      users?: Array<string>,
      approved?: boolean,
      resources?: Array<string>,
      timestampFrom?: number,
      timestampTo?: number,
      page?: number,
      perPage?: number,
      permitSession?: string,
      options?: any,
    ): AxiosPromise<AuditLogs> {
      return localVarFp
        .getOpaLogs(
          users,
          approved,
          resources,
          timestampFrom,
          timestampTo,
          page,
          perPage,
          permitSession,
          options,
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for getOpaLogs operation in DecisionLogsApi.
 * @export
 * @interface DecisionLogsApiGetOpaLogsRequest
 */
export interface DecisionLogsApiGetOpaLogsRequest {
  /**
   * List of user IDs to filter by
   * @type {Array<string>}
   * @memberof DecisionLogsApiGetOpaLogs
   */
  readonly users?: Array<string>;

  /**
   * Filter by approved decisions
   * @type {boolean}
   * @memberof DecisionLogsApiGetOpaLogs
   */
  readonly approved?: boolean;

  /**
   * Filter by resources
   * @type {Array<string>}
   * @memberof DecisionLogsApiGetOpaLogs
   */
  readonly resources?: Array<string>;

  /**
   * Filter by timestamp from
   * @type {number}
   * @memberof DecisionLogsApiGetOpaLogs
   */
  readonly timestampFrom?: number;

  /**
   * Filter by timestamp to
   * @type {number}
   * @memberof DecisionLogsApiGetOpaLogs
   */
  readonly timestampTo?: number;

  /**
   * Page number of the results to fetch, starting at 1.
   * @type {number}
   * @memberof DecisionLogsApiGetOpaLogs
   */
  readonly page?: number;

  /**
   * The number of results per page (max 100).
   * @type {number}
   * @memberof DecisionLogsApiGetOpaLogs
   */
  readonly perPage?: number;

  /**
   *
   * @type {string}
   * @memberof DecisionLogsApiGetOpaLogs
   */
  readonly permitSession?: string;
}

/**
 * DecisionLogsApi - object-oriented interface
 * @export
 * @class DecisionLogsApi
 * @extends {BaseAPI}
 */
export class DecisionLogsApi extends BaseAPI {
  /**
   *
   * @summary List PDP Decisions
   * @param {DecisionLogsApiGetOpaLogsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DecisionLogsApi
   */
  public getOpaLogs(
    requestParameters: DecisionLogsApiGetOpaLogsRequest = {},
    options?: AxiosRequestConfig,
  ) {
    return DecisionLogsApiFp(this.configuration)
      .getOpaLogs(
        requestParameters.users,
        requestParameters.approved,
        requestParameters.resources,
        requestParameters.timestampFrom,
        requestParameters.timestampTo,
        requestParameters.page,
        requestParameters.perPage,
        requestParameters.permitSession,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
