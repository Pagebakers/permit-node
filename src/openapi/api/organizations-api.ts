/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HTTPValidationError } from '../types';
// @ts-ignore
import { OrganizationCreate } from '../types';
// @ts-ignore
import { OrganizationRead } from '../types';
// @ts-ignore
import { OrganizationUpdate } from '../types';
/**
 * OrganizationsApi - axios parameter creator
 * @export
 */
export const OrganizationsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Creates a new organization that will be owned by the authenticated actor (i.e: human team member or api key).
     * @summary Create Organization
     * @param {OrganizationCreate} organizationCreate
     * @param {string} [permitSession]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganization: async (
      organizationCreate: OrganizationCreate,
      permitSession?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'organizationCreate' is not null or undefined
      assertParamExists('createOrganization', 'organizationCreate', organizationCreate);
      const localVarPath = `/v2/orgs`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        organizationCreate,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Deletes an organization (Permit.io account) and all its related data.
     * @summary Delete Organization
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {string} [permitSession]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganization: async (
      orgId: string,
      permitSession?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'orgId' is not null or undefined
      assertParamExists('deleteOrganization', 'orgId', orgId);
      const localVarPath = `/v2/orgs/{org_id}`.replace(
        `{${'org_id'}}`,
        encodeURIComponent(String(orgId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Gets a single organization (Permit.io account) matching the given org_id, if such org exists and can be accessed by the authenticated actor.
     * @summary Get Organization
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {string} [permitSession]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganization: async (
      orgId: string,
      permitSession?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'orgId' is not null or undefined
      assertParamExists('getOrganization', 'orgId', orgId);
      const localVarPath = `/v2/orgs/{org_id}`.replace(
        `{${'org_id'}}`,
        encodeURIComponent(String(orgId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Lists all the organizations that can be accessed by the authenticated actor (i.e: human team member or api key).
     * @summary List Organizations
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {string} [permitSession]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizations: async (
      page?: number,
      perPage?: number,
      permitSession?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/v2/orgs`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (perPage !== undefined) {
        localVarQueryParameter['per_page'] = perPage;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Updates the organization\'s profile.
     * @summary Update Organization
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {OrganizationUpdate} organizationUpdate
     * @param {string} [permitSession]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganization: async (
      orgId: string,
      organizationUpdate: OrganizationUpdate,
      permitSession?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'orgId' is not null or undefined
      assertParamExists('updateOrganization', 'orgId', orgId);
      // verify required parameter 'organizationUpdate' is not null or undefined
      assertParamExists('updateOrganization', 'organizationUpdate', organizationUpdate);
      const localVarPath = `/v2/orgs/{org_id}`.replace(
        `{${'org_id'}}`,
        encodeURIComponent(String(orgId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication HTTPBearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        organizationUpdate,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * OrganizationsApi - functional programming interface
 * @export
 */
export const OrganizationsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = OrganizationsApiAxiosParamCreator(configuration);
  return {
    /**
     * Creates a new organization that will be owned by the authenticated actor (i.e: human team member or api key).
     * @summary Create Organization
     * @param {OrganizationCreate} organizationCreate
     * @param {string} [permitSession]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createOrganization(
      organizationCreate: OrganizationCreate,
      permitSession?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationRead>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createOrganization(
        organizationCreate,
        permitSession,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Deletes an organization (Permit.io account) and all its related data.
     * @summary Delete Organization
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {string} [permitSession]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteOrganization(
      orgId: string,
      permitSession?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrganization(
        orgId,
        permitSession,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Gets a single organization (Permit.io account) matching the given org_id, if such org exists and can be accessed by the authenticated actor.
     * @summary Get Organization
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {string} [permitSession]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOrganization(
      orgId: string,
      permitSession?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationRead>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganization(
        orgId,
        permitSession,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Lists all the organizations that can be accessed by the authenticated actor (i.e: human team member or api key).
     * @summary List Organizations
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {string} [permitSession]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listOrganizations(
      page?: number,
      perPage?: number,
      permitSession?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrganizationRead>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listOrganizations(
        page,
        perPage,
        permitSession,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Updates the organization\'s profile.
     * @summary Update Organization
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {OrganizationUpdate} organizationUpdate
     * @param {string} [permitSession]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateOrganization(
      orgId: string,
      organizationUpdate: OrganizationUpdate,
      permitSession?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationRead>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateOrganization(
        orgId,
        organizationUpdate,
        permitSession,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * OrganizationsApi - factory interface
 * @export
 */
export const OrganizationsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = OrganizationsApiFp(configuration);
  return {
    /**
     * Creates a new organization that will be owned by the authenticated actor (i.e: human team member or api key).
     * @summary Create Organization
     * @param {OrganizationCreate} organizationCreate
     * @param {string} [permitSession]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganization(
      organizationCreate: OrganizationCreate,
      permitSession?: string,
      options?: any,
    ): AxiosPromise<OrganizationRead> {
      return localVarFp
        .createOrganization(organizationCreate, permitSession, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Deletes an organization (Permit.io account) and all its related data.
     * @summary Delete Organization
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {string} [permitSession]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganization(orgId: string, permitSession?: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteOrganization(orgId, permitSession, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Gets a single organization (Permit.io account) matching the given org_id, if such org exists and can be accessed by the authenticated actor.
     * @summary Get Organization
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {string} [permitSession]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganization(
      orgId: string,
      permitSession?: string,
      options?: any,
    ): AxiosPromise<OrganizationRead> {
      return localVarFp
        .getOrganization(orgId, permitSession, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Lists all the organizations that can be accessed by the authenticated actor (i.e: human team member or api key).
     * @summary List Organizations
     * @param {number} [page] Page number of the results to fetch, starting at 1.
     * @param {number} [perPage] The number of results per page (max 100).
     * @param {string} [permitSession]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizations(
      page?: number,
      perPage?: number,
      permitSession?: string,
      options?: any,
    ): AxiosPromise<Array<OrganizationRead>> {
      return localVarFp
        .listOrganizations(page, perPage, permitSession, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Updates the organization\'s profile.
     * @summary Update Organization
     * @param {string} orgId Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
     * @param {OrganizationUpdate} organizationUpdate
     * @param {string} [permitSession]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganization(
      orgId: string,
      organizationUpdate: OrganizationUpdate,
      permitSession?: string,
      options?: any,
    ): AxiosPromise<OrganizationRead> {
      return localVarFp
        .updateOrganization(orgId, organizationUpdate, permitSession, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for createOrganization operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiCreateOrganizationRequest
 */
export interface OrganizationsApiCreateOrganizationRequest {
  /**
   *
   * @type {OrganizationCreate}
   * @memberof OrganizationsApiCreateOrganization
   */
  readonly organizationCreate: OrganizationCreate;

  /**
   *
   * @type {string}
   * @memberof OrganizationsApiCreateOrganization
   */
  readonly permitSession?: string;
}

/**
 * Request parameters for deleteOrganization operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiDeleteOrganizationRequest
 */
export interface OrganizationsApiDeleteOrganizationRequest {
  /**
   * Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof OrganizationsApiDeleteOrganization
   */
  readonly orgId: string;

  /**
   *
   * @type {string}
   * @memberof OrganizationsApiDeleteOrganization
   */
  readonly permitSession?: string;
}

/**
 * Request parameters for getOrganization operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiGetOrganizationRequest
 */
export interface OrganizationsApiGetOrganizationRequest {
  /**
   * Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof OrganizationsApiGetOrganization
   */
  readonly orgId: string;

  /**
   *
   * @type {string}
   * @memberof OrganizationsApiGetOrganization
   */
  readonly permitSession?: string;
}

/**
 * Request parameters for listOrganizations operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiListOrganizationsRequest
 */
export interface OrganizationsApiListOrganizationsRequest {
  /**
   * Page number of the results to fetch, starting at 1.
   * @type {number}
   * @memberof OrganizationsApiListOrganizations
   */
  readonly page?: number;

  /**
   * The number of results per page (max 100).
   * @type {number}
   * @memberof OrganizationsApiListOrganizations
   */
  readonly perPage?: number;

  /**
   *
   * @type {string}
   * @memberof OrganizationsApiListOrganizations
   */
  readonly permitSession?: string;
}

/**
 * Request parameters for updateOrganization operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiUpdateOrganizationRequest
 */
export interface OrganizationsApiUpdateOrganizationRequest {
  /**
   * Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \&quot;slug\&quot;).
   * @type {string}
   * @memberof OrganizationsApiUpdateOrganization
   */
  readonly orgId: string;

  /**
   *
   * @type {OrganizationUpdate}
   * @memberof OrganizationsApiUpdateOrganization
   */
  readonly organizationUpdate: OrganizationUpdate;

  /**
   *
   * @type {string}
   * @memberof OrganizationsApiUpdateOrganization
   */
  readonly permitSession?: string;
}

/**
 * OrganizationsApi - object-oriented interface
 * @export
 * @class OrganizationsApi
 * @extends {BaseAPI}
 */
export class OrganizationsApi extends BaseAPI {
  /**
   * Creates a new organization that will be owned by the authenticated actor (i.e: human team member or api key).
   * @summary Create Organization
   * @param {OrganizationsApiCreateOrganizationRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  public createOrganization(
    requestParameters: OrganizationsApiCreateOrganizationRequest,
    options?: AxiosRequestConfig,
  ) {
    return OrganizationsApiFp(this.configuration)
      .createOrganization(
        requestParameters.organizationCreate,
        requestParameters.permitSession,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Deletes an organization (Permit.io account) and all its related data.
   * @summary Delete Organization
   * @param {OrganizationsApiDeleteOrganizationRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  public deleteOrganization(
    requestParameters: OrganizationsApiDeleteOrganizationRequest,
    options?: AxiosRequestConfig,
  ) {
    return OrganizationsApiFp(this.configuration)
      .deleteOrganization(requestParameters.orgId, requestParameters.permitSession, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Gets a single organization (Permit.io account) matching the given org_id, if such org exists and can be accessed by the authenticated actor.
   * @summary Get Organization
   * @param {OrganizationsApiGetOrganizationRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  public getOrganization(
    requestParameters: OrganizationsApiGetOrganizationRequest,
    options?: AxiosRequestConfig,
  ) {
    return OrganizationsApiFp(this.configuration)
      .getOrganization(requestParameters.orgId, requestParameters.permitSession, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Lists all the organizations that can be accessed by the authenticated actor (i.e: human team member or api key).
   * @summary List Organizations
   * @param {OrganizationsApiListOrganizationsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  public listOrganizations(
    requestParameters: OrganizationsApiListOrganizationsRequest = {},
    options?: AxiosRequestConfig,
  ) {
    return OrganizationsApiFp(this.configuration)
      .listOrganizations(
        requestParameters.page,
        requestParameters.perPage,
        requestParameters.permitSession,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Updates the organization\'s profile.
   * @summary Update Organization
   * @param {OrganizationsApiUpdateOrganizationRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  public updateOrganization(
    requestParameters: OrganizationsApiUpdateOrganizationRequest,
    options?: AxiosRequestConfig,
  ) {
    return OrganizationsApiFp(this.configuration)
      .updateOrganization(
        requestParameters.orgId,
        requestParameters.organizationUpdate,
        requestParameters.permitSession,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
